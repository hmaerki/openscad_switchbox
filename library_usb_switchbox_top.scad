// Generated by SolidPython 1.1.1 on 2021-05-14 23:19:40
$fn = 100;


difference() {
	union() {
		difference() {
			linear_extrude(height = 13) {
				offset(r = 6.0000000000) {
					square(center = true, size = [106.0000000000, 53.0000000000]);
				}
			}
			translate(v = [0, 0, 2]) {
				linear_extrude(height = 13.0100000000) {
					difference() {
						offset(r = 4.0000000000) {
							square(center = true, size = [106.0000000000, 53.0000000000]);
						}
						union() {
							translate(v = [-59.0000000000, -32.5000000000, 0]) {
								difference() {
									translate(v = [-2.0000000000, -2.0000000000, 0]) {
										offset(r = 2.0000000000) {
											square(size = [6.0000000000, 6.0000000000]);
										}
									}
									translate(v = [4.0000000000, 4.0000000000, 0]) {
										circle(r = 0.7500000000);
									}
								}
							}
							mirror(v = [1, 0, 0]) {
								translate(v = [-59.0000000000, -32.5000000000, 0]) {
									difference() {
										translate(v = [-2.0000000000, -2.0000000000, 0]) {
											offset(r = 2.0000000000) {
												square(size = [6.0000000000, 6.0000000000]);
											}
										}
										translate(v = [4.0000000000, 4.0000000000, 0]) {
											circle(r = 0.7500000000);
										}
									}
								}
							}
							mirror(v = [0, 1, 0]) {
								union() {
									translate(v = [-59.0000000000, -32.5000000000, 0]) {
										difference() {
											translate(v = [-2.0000000000, -2.0000000000, 0]) {
												offset(r = 2.0000000000) {
													square(size = [6.0000000000, 6.0000000000]);
												}
											}
											translate(v = [4.0000000000, 4.0000000000, 0]) {
												circle(r = 0.7500000000);
											}
										}
									}
									mirror(v = [1, 0, 0]) {
										translate(v = [-59.0000000000, -32.5000000000, 0]) {
											difference() {
												translate(v = [-2.0000000000, -2.0000000000, 0]) {
													offset(r = 2.0000000000) {
														square(size = [6.0000000000, 6.0000000000]);
													}
												}
												translate(v = [4.0000000000, 4.0000000000, 0]) {
													circle(r = 0.7500000000);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	translate(v = [0, 0, 29]) {
		rotate(a = [180, 0, 0]) {
			#union() {
				translate(v = [59.0000000000, 0, 14]) {
					rotate(a = [0, 0, 90]) {
						union() {
							translate(v = [0, 3, 0]) {
								rotate(a = [90, 0, 0]) {
									linear_extrude(height = 3) {
										offset(r = 3) {
											square(center = true, size = [38, 12]);
										}
									}
								}
							}
							translate(v = [-26.2500000000, 3, -12.5000000000]) {
								cube(size = [52.5000000000, 2, 25]);
							}
							translate(v = [-26.0000000000, 5, -10.5000000000]) {
								cube(size = [52, 15, 21]);
							}
							translate(v = [26.0000000000, 15, 0]) {
								rotate(a = [0, 90, 0]) {
									linear_extrude(height = 20) {
										offset(r = 3) {
											square(center = true, size = [8, 4]);
										}
									}
								}
							}
						}
					}
				}
				translate(v = [-8, 0, 9]) {
					union() {
						translate(v = [0, -1.7500000000, -0.8000000000]) {
							union() {
								cube(center = true, size = [89.5000000000, 53.5000000000, 1.6000000000]);
								translate(v = [-36.0000000000, 3, -3]) {
									cylinder(center = true, d = 2, h = 5);
								}
								translate(v = [36.0000000000, 3, -3]) {
									cylinder(center = true, d = 2, h = 5);
								}
							}
						}
						translate(v = [0, 17.5000000000, 3.5000000000]) {
							cube(center = true, size = [15, 35, 7]);
						}
						union() {
							translate(v = [-28.0000000000, -17.5000000000, 6.2500000000]) {
								cube(center = true, size = [12, 35, 12.5000000000]);
							}
							translate(v = [-9.3333333333, -17.5000000000, 6.2500000000]) {
								cube(center = true, size = [12, 35, 12.5000000000]);
							}
							translate(v = [9.3333333333, -17.5000000000, 6.2500000000]) {
								cube(center = true, size = [12, 35, 12.5000000000]);
							}
							translate(v = [28.0000000000, -17.5000000000, 6.2500000000]) {
								cube(center = true, size = [12, 35, 12.5000000000]);
							}
						}
					}
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from dataclasses import dataclass
from solid import *
from solid.utils import *

import library_box
import library_pcb
import library_display
import library_usb_switchbox_bottom


@dataclass
class UsbSwitchBoxTop:
    size_y = 65
    size_x = 118
    size_z = 13
    hull_thickness = 2
    corner_r = 2.5
    screw_d = 3

    def draw(self):
        # Box with corners
        corner = library_box.Corner()
        boxskeleton = library_box.BoxSkeleton(
            size_x=self.size_x,
            size_y=self.size_y,
            size_z=self.size_z,
            hull_thickness=self.hull_thickness,
        )
        box = library_box.Box(boxskeleton=boxskeleton, corner=corner)

        # Box with supports
        box_complete = union()
        box_complete += box.draw()

        pcb_offset_z = 29
        cores = translate(v=[0, 0, pcb_offset_z])(
            rotate([180, 0, 0])(
                library_usb_switchbox_bottom.UsbSwitchBoxCores(
                    size_x=self.size_x
                ).draw()
            )
        )

        return box_complete - cores


SEGMENTS = 100

box = UsbSwitchBoxTop()

scad_render_to_file(
    box.draw(), file_header=f"$fn = {SEGMENTS};", include_orig_code=True
)
 
 
************************************************/
