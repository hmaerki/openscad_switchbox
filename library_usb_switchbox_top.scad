// Generated by SolidPython 1.1.1 on 2021-05-22 21:53:13
$fn = 100;


difference() {
	union() {
		difference() {
			linear_extrude(height = 11.5000000000) {
				offset(r = 6.0000000000) {
					square(center = true, size = [108.0000000000, 54.0000000000]);
				}
			}
			translate(v = [0, 0, 1.6000000000]) {
				linear_extrude(height = 11.5100000000) {
					difference() {
						offset(r = 3.6000000000) {
							square(center = true, size = [108.0000000000, 54.0000000000]);
						}
						union() {
							translate(v = [-60.0000000000, -33.0000000000, 0]) {
								difference() {
									translate(v = [-1.5000000000, -1.5000000000, 0]) {
										offset(r = 3.0000000000) {
											square(size = [7.0000000000, 7.0000000000]);
										}
									}
									translate(v = [4.0000000000, 4.0000000000, 0]) {
										circle(r = 1.2500000000);
									}
								}
							}
							mirror(v = [1, 0, 0]) {
								translate(v = [-60.0000000000, -33.0000000000, 0]) {
									difference() {
										translate(v = [-1.5000000000, -1.5000000000, 0]) {
											offset(r = 3.0000000000) {
												square(size = [7.0000000000, 7.0000000000]);
											}
										}
										translate(v = [4.0000000000, 4.0000000000, 0]) {
											circle(r = 1.2500000000);
										}
									}
								}
							}
							mirror(v = [0, 1, 0]) {
								union() {
									translate(v = [-60.0000000000, -33.0000000000, 0]) {
										difference() {
											translate(v = [-1.5000000000, -1.5000000000, 0]) {
												offset(r = 3.0000000000) {
													square(size = [7.0000000000, 7.0000000000]);
												}
											}
											translate(v = [4.0000000000, 4.0000000000, 0]) {
												circle(r = 1.2500000000);
											}
										}
									}
									mirror(v = [1, 0, 0]) {
										translate(v = [-60.0000000000, -33.0000000000, 0]) {
											difference() {
												translate(v = [-1.5000000000, -1.5000000000, 0]) {
													offset(r = 3.0000000000) {
														square(size = [7.0000000000, 7.0000000000]);
													}
												}
												translate(v = [4.0000000000, 4.0000000000, 0]) {
													circle(r = 1.2500000000);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		translate(v = [48.2000000000, 0, 5.7500000000]) {
			cube(center = true, size = [1.6000000000, 66, 11.5000000000]);
		}
		translate(v = [39.9000000000, 0, 5.7500000000]) {
			cube(center = true, size = [1.6000000000, 66, 11.5000000000]);
		}
	}
	translate(v = [0, 0, 30]) {
		rotate(a = [180, 0, 0]) {
			#union() {
				translate(v = [60.0000000000, 0, 15]) {
					rotate(a = [0, 0, 90]) {
						union() {
							translate(v = [0, 3, 0]) {
								rotate(a = [90, 0, 0]) {
									linear_extrude(height = 3) {
										offset(r = 3) {
											square(center = true, size = [42, 14]);
										}
									}
								}
							}
							translate(v = [-26.5000000000, 3, -12.5000000000]) {
								cube(size = [53, 2, 25]);
							}
							translate(v = [-26.0000000000, 5, -10.5000000000]) {
								cube(size = [52, 14.3000000000, 21]);
							}
							translate(v = [26.0000000000, 18, 0]) {
								rotate(a = [0, 90, 0]) {
									linear_extrude(height = 20) {
										offset(r = 3) {
											square(center = true, size = [8, 4]);
										}
									}
								}
							}
						}
					}
				}
				translate(v = [-6, 0, 10]) {
					union() {
						translate(v = [0, -1.7500000000, -0.8000000000]) {
							union() {
								cube(center = true, size = [90.0000000000, 53.5000000000, 1.6000000000]);
								translate(v = [0, 0, 2.3000000000]) {
									cube(center = true, size = [90.0000000000, 53.5000000000, 3]);
								}
								translate(v = [-36.2500000000, 3, -3]) {
									cylinder(center = true, d = 2, h = 5);
								}
								translate(v = [36.2500000000, 3, -3]) {
									cylinder(center = true, d = 2, h = 5);
								}
							}
						}
						translate(v = [0, 17.5000000000, 4.2500000000]) {
							cube(center = true, size = [15, 35, 8.5000000000]);
						}
						union() {
							translate(v = [-28.0000000000, -17.5000000000, 6.2500000000]) {
								cube(center = true, size = [13, 35, 12.5000000000]);
							}
							translate(v = [-9.3333333333, -17.5000000000, 6.2500000000]) {
								cube(center = true, size = [13, 35, 12.5000000000]);
							}
							translate(v = [9.3333333333, -17.5000000000, 6.2500000000]) {
								cube(center = true, size = [13, 35, 12.5000000000]);
							}
							translate(v = [28.0000000000, -17.5000000000, 6.2500000000]) {
								cube(center = true, size = [13, 35, 12.5000000000]);
							}
						}
					}
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from dataclasses import dataclass
from solid import *
from solid.utils import *

import library_box
import library_usb_switchbox_bottom

bottom = library_usb_switchbox_bottom.UsbSwitchBoxBottom(is_top=False)


@dataclass
class UsbSwitchBoxTop:
    size_y = bottom.size_y
    size_x = bottom.size_x
    size_z_overall = 30
    size_z = size_z_overall - bottom.size_z
    hull_thickness = bottom.hull_thickness
    bottom_top_thickness = bottom.bottom_top_thickness
    corner_r = bottom.corner_r
    screw_hole_top_d  = bottom.screw_hole_top_d    

    def draw(self):
        # Box with corners
        corner = library_box.Corner(hole_d=self.screw_hole_top_d)
        boxskeleton = library_box.BoxSkeleton(
            size_x=self.size_x,
            size_y=self.size_y,
            size_z=self.size_z,
            hull_thickness=self.hull_thickness,
            bottom_top_thickness=self.bottom_top_thickness,
        )
        box = library_box.Box(boxskeleton=boxskeleton, corner=corner)

        # Box with supports
        box_complete = union()
        box_complete += box.draw()

        support = library_usb_switchbox_bottom.SupportY(size_y=self.size_y, size_z=self.size_z)
        display_supports_x = (11.0, 19.3)
        for x in display_supports_x:
            box_complete += (
                translate(
                    v=[
                        self.size_x / 2 - x - support.thickness_x / 2,
                        0,
                        support.size_z / 2,
                    ]
                )(support.draw()),
            )

        cores = translate(v=[0, 0, self.size_z_overall])(
            rotate([180, 0, 0])(
                library_usb_switchbox_bottom.UsbSwitchBoxCores(
                    size_x=self.size_x,
                    is_top=True
                ).draw()
            )
        )

        return box_complete - cores


SEGMENTS = 100

box = UsbSwitchBoxTop()

scad_render_to_file(
    box.draw(), file_header=f"$fn = {SEGMENTS};", include_orig_code=True
)
 
 
************************************************/
